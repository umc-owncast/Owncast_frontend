Index: app/src/main/java/kr/dori/android/own_cast/search/SearchAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.dori.android.own_cast.search\r\n\r\nimport android.graphics.BitmapFactory\r\nimport android.view.LayoutInflater\r\nimport android.view.ViewGroup\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.bumptech.glide.Glide\r\nimport kr.dori.android.own_cast.data.SongData\r\nimport kr.dori.android.own_cast.databinding.ItemSearchFrBinding\r\nimport kr.dori.android.own_cast.forApiData.CastHomeDTO\r\n\r\nclass SearchAdapter(private val mover: SearchMover) : RecyclerView.Adapter<SearchAdapter.Holder>() {\r\n    var dataList: List<CastHomeDTO> = listOf()\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): Holder {\r\n        val binding = ItemSearchFrBinding.inflate(LayoutInflater.from(parent.context), parent, false)\r\n        return Holder(binding)\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: Holder, position: Int) {\r\n        val data = dataList[position]\r\n        holder.setData(data,holder)\r\n\r\n\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return dataList.size\r\n    }\r\n\r\n    inner class Holder(val binding: ItemSearchFrBinding):RecyclerView.ViewHolder(binding.root){\r\n\r\n        init{\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n        fun setData(data: CastHomeDTO,holder: Holder){\r\n            val imagePath = data.imagePath\r\n\r\n            if (data.imagePath.startsWith(\"http\")) {\r\n                // URL로부터 이미지 로드 (Glide 사용)\r\n                Glide.with(holder.itemView.context)\r\n                    .load(data.imagePath)\r\n\r\n                    .into(binding.itemThumbIv)\r\n            } else {\r\n                // 로컬 파일에서 이미지 로드\r\n                val bitmap = BitmapFactory.decodeFile(data.imagePath)\r\n                binding.itemThumbIv.setImageBitmap(bitmap)\r\n            }\r\n\r\n            binding.searchfrItemTitleTv.text = data.title\r\n            binding.searchfrItemCategoryTv.text = \"${data.memberName}-${data.playlistName}\"\r\n            binding.searchfrItemDurationTv.text = formatTime(data.audioLength.toInt())\r\n\r\n            binding.searchfrItemAddCategoryOffIv.setOnClickListener {\r\n                mover.goAddCast(data.id)\r\n            }\r\n            binding.itemThumbIv.setOnClickListener {\r\n                mover.goPlayCast(dataList,data.id)\r\n            }\r\n        }\r\n        private fun formatTime(totalSeconds:Int): String {\r\n            val minutes = totalSeconds / 60\r\n            val seconds = totalSeconds % 60\r\n            return String.format(\"%d:%02d\", minutes, seconds)\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/kr/dori/android/own_cast/search/SearchAdapter.kt b/app/src/main/java/kr/dori/android/own_cast/search/SearchAdapter.kt
--- a/app/src/main/java/kr/dori/android/own_cast/search/SearchAdapter.kt	(revision ee11466f4ade434120101553d91eedd828823197)
+++ b/app/src/main/java/kr/dori/android/own_cast/search/SearchAdapter.kt	(date 1724057939078)
@@ -20,8 +20,6 @@
     override fun onBindViewHolder(holder: Holder, position: Int) {
         val data = dataList[position]
         holder.setData(data,holder)
-
-
     }
 
     override fun getItemCount(): Int {
Index: app/src/main/java/kr/dori/android/own_cast/ActivityMover.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.dori.android.own_cast\r\n\r\nimport kr.dori.android.own_cast.forApiData.Cast\r\n\r\n\r\ninterface ActivityMover {\r\n    fun ToPlayCast(castList: List<Cast>)\r\n\r\n    fun ToEditAudio()\r\n//\r\n//    fun ownCastToCast()\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/kr/dori/android/own_cast/ActivityMover.kt b/app/src/main/java/kr/dori/android/own_cast/ActivityMover.kt
--- a/app/src/main/java/kr/dori/android/own_cast/ActivityMover.kt	(revision ee11466f4ade434120101553d91eedd828823197)
+++ b/app/src/main/java/kr/dori/android/own_cast/ActivityMover.kt	(date 1724057939034)
@@ -6,7 +6,7 @@
 interface ActivityMover {
     fun ToPlayCast(castList: List<Cast>)
 
-    fun ToEditAudio()
+    fun ToEditAudio(id: Long, playlistId:Long)
 //
 //    fun ownCastToCast()
 }
Index: app/src/main/java/kr/dori/android/own_cast/playlist/CastAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.dori.android.own_cast.playlist\r\n\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.constraintlayout.widget.ConstraintLayout\r\nimport androidx.constraintlayout.widget.ConstraintSet\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport kr.dori.android.own_cast.ActivityMover\r\nimport kr.dori.android.own_cast.data.SongData\r\nimport kr.dori.android.own_cast.databinding.CastItemLayoutBinding\r\nimport kr.dori.android.own_cast.forApiData.Cast\r\n\r\nclass CastAdapter(private val activityMover: ActivityMover) : RecyclerView.Adapter<CastAdapter.Holder>() {\r\n    var dataList: MutableList<Cast> = mutableListOf()\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): Holder {\r\n        val binding = CastItemLayoutBinding.inflate(LayoutInflater.from(parent.context), parent, false)\r\n        return Holder(binding)\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: Holder, position: Int) {\r\n        val data = dataList[position]\r\n        holder.setText(data)\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return dataList.size\r\n    }\r\n\r\n    inner class Holder(val binding: CastItemLayoutBinding): RecyclerView.ViewHolder(binding.root) {\r\n\r\n\r\n        init {\r\n            binding.goPlaycastConstraint.setOnClickListener {\r\n                val position = adapterPosition\r\n                if (position != RecyclerView.NO_POSITION) {\r\n                    val cast = dataList[position]\r\n                    activityMover.ToPlayCast(listOf(cast))\r\n                    Log.d(\"tag\",\"${cast.castId}\")\r\n                }\r\n            }\r\n        }\r\n\r\n        fun setText(data: Cast) {\r\n\r\n            val constraintLayout = binding.root as ConstraintLayout\r\n            val constraintSet = ConstraintSet()\r\n            constraintSet.clone(constraintLayout)\r\n            binding.castItemTitleTv.text = data.castTitle\r\n            binding.timeTableTv.text = formatTime(data.audioLength)\r\n\r\n            if(data.castCreator == \"헬로\") {\r\n                binding.castItemCreator.visibility = View.GONE\r\n                binding.castItemEditIv.visibility = View.VISIBLE\r\n                binding.castItemEditIv.setOnClickListener {\r\n                    activityMover.ToEditAudio()\r\n                }\r\n                if(data.isPublic) {\r\n                    binding.castItemLockIv.visibility = View.GONE\r\n                } else {\r\n                    binding.castItemLockIv.visibility = View.VISIBLE\r\n                    binding.castItemTitleTv.apply{\r\n\r\n                    }\r\n                }\r\n            } else {\r\n                binding.castItemEditIv.visibility = View.GONE\r\n                binding.castItemCreator.visibility = View.VISIBLE\r\n                binding.castItemCreator.text = \"${data.castCreator}-${data.castCreator}\"\r\n                binding.castItemLockIv.visibility=View.GONE\r\n            }\r\n            if (binding.castItemCreator.visibility == View.GONE && binding.castItemLockIv.visibility == View.GONE) {\r\n                // 중앙에 배치\r\n                constraintSet.connect(binding.castItemTitleTv.id, ConstraintSet.TOP, ConstraintSet.PARENT_ID, ConstraintSet.TOP, 0)\r\n                constraintSet.connect(binding.castItemTitleTv.id, ConstraintSet.BOTTOM, ConstraintSet.PARENT_ID, ConstraintSet.BOTTOM, 0)\r\n                constraintSet.setVerticalBias(binding.castItemTitleTv.id, 0.5f)\r\n            } else {\r\n                // 원래 위치\r\n                constraintSet.connect(binding.castItemTitleTv.id, ConstraintSet.START, binding.playlistCast2Iv.id, ConstraintSet.END, 16)\r\n                constraintSet.connect(binding.castItemTitleTv.id, ConstraintSet.END, binding.castItemEditIv.id, ConstraintSet.START, 16)\r\n                constraintSet.setHorizontalBias(binding.castItemTitleTv.id, 0.0f)\r\n            }\r\n        }\r\n    }\r\n    fun formatTime(input: String): String {\r\n        return if (input.contains(\":\")) {\r\n            // 입력이 이미 \"분:초\" 형식인 경우\r\n            input\r\n        } else {\r\n            // 입력이 초 단위로 들어오는 경우\r\n            val totalSeconds = input.toIntOrNull() ?: return \"00:00\" // 입력이 숫자가 아닌 경우 대비\r\n            val minutes = totalSeconds / 60\r\n            val seconds = totalSeconds % 60\r\n            String.format(\"%02d:%02d\", minutes, seconds)\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/kr/dori/android/own_cast/playlist/CastAdapter.kt b/app/src/main/java/kr/dori/android/own_cast/playlist/CastAdapter.kt
--- a/app/src/main/java/kr/dori/android/own_cast/playlist/CastAdapter.kt	(revision ee11466f4ade434120101553d91eedd828823197)
+++ b/app/src/main/java/kr/dori/android/own_cast/playlist/CastAdapter.kt	(date 1724057939041)
@@ -55,7 +55,7 @@
                 binding.castItemCreator.visibility = View.GONE
                 binding.castItemEditIv.visibility = View.VISIBLE
                 binding.castItemEditIv.setOnClickListener {
-                    activityMover.ToEditAudio()
+                    activityMover.ToEditAudio(data.castId,data.playlistId)
                 }
                 if(data.isPublic) {
                     binding.castItemLockIv.visibility = View.GONE
Index: app/src/main/java/kr/dori/android/own_cast/editAudio/EditAudioActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.dori.android.own_cast.editAudio\r\n\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport kr.dori.android.own_cast.R\r\nimport kr.dori.android.own_cast.databinding.ActivityEditAudioBinding\r\n\r\nclass EditAudioActivity() : AppCompatActivity(), EditAudio {\r\n\r\n    private lateinit var binding: ActivityEditAudioBinding\r\n    var isLock: Boolean = false\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityEditAudioBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.activityEditAudioExitIv.setOnClickListener {\r\n            finish()\r\n        }\r\n\r\n        binding.activityEditAudioSwitchOff.setOnClickListener {\r\n            lock(isLock)\r\n            isLock = false\r\n        }\r\n\r\n        binding.activityEditAudioSwitchOn.setOnClickListener {\r\n            lock(isLock)\r\n            isLock = true\r\n        }\r\n\r\n        binding.activityEditAudioOk.setOnClickListener {\r\n            finish()\r\n        }\r\n\r\n        binding.activityEditAudioDelete.setOnClickListener {\r\n            val dialog = EditAudioDialog(this, this)\r\n            dialog.show()\r\n        }\r\n    }\r\n\r\n    fun lock(isLock: Boolean) {\r\n        if (isLock) {\r\n            binding.activityEditAudioSwitchOff.visibility = View.VISIBLE\r\n            binding.activityEditAudioSwitchOn.visibility = View.GONE\r\n        } else {\r\n            binding.activityEditAudioSwitchOff.visibility = View.GONE\r\n            binding.activityEditAudioSwitchOn.visibility = View.VISIBLE\r\n        }\r\n    }\r\n\r\n    fun showCustomToast(message: String) {\r\n        val inflater: LayoutInflater = layoutInflater\r\n        val layout: View = inflater.inflate(R.layout.custom_toast, findViewById(R.id.custom_toast_container))\r\n\r\n        val textView: TextView = layout.findViewById(R.id.toast_message_tv)\r\n        textView.text = message\r\n\r\n        with (Toast(applicationContext)) {\r\n            duration = Toast.LENGTH_LONG\r\n            view = layout\r\n           // setGravity(Gravity.BOTTOM or Gravity.CENTER_HORIZONTAL, 0, 100)\r\n            show()\r\n        }\r\n    }\r\n\r\n    override fun dialogToEditAudio() {\r\n        showCustomToast(\"캐스트가 삭제되었어요\")\r\n        finish()\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/kr/dori/android/own_cast/editAudio/EditAudioActivity.kt b/app/src/main/java/kr/dori/android/own_cast/editAudio/EditAudioActivity.kt
--- a/app/src/main/java/kr/dori/android/own_cast/editAudio/EditAudioActivity.kt	(revision ee11466f4ade434120101553d91eedd828823197)
+++ b/app/src/main/java/kr/dori/android/own_cast/editAudio/EditAudioActivity.kt	(date 1724057939055)
@@ -6,8 +6,15 @@
 import android.widget.TextView
 import android.widget.Toast
 import androidx.appcompat.app.AppCompatActivity
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
 import kr.dori.android.own_cast.R
 import kr.dori.android.own_cast.databinding.ActivityEditAudioBinding
+import kr.dori.android.own_cast.forApiData.CastInterface
+import kr.dori.android.own_cast.getRetrofit
+import kr.dori.android.own_cast.keyword.KeywordAppData
+import kr.dori.android.own_cast.keyword.KeywordLoadingDialog
 
 class EditAudioActivity() : AppCompatActivity(), EditAudio {
 
@@ -73,4 +80,32 @@
         showCustomToast("캐스트가 삭제되었어요")
         finish()
     }
+
+    fun initData(){
+        val getKeyword = getRetrofit().create(CastInterface::class.java)
+        val dialog = KeywordLoadingDialog(this,"데이터를 불러오고 있어요")
+        dialog.setCancelable(false)
+        dialog.setCanceledOnTouchOutside(false)
+        dialog.show()
+        CoroutineScope(Dispatchers.IO).launch() {
+            launch {
+
+                try {
+                    dialog.dismiss()
+                    val response = getKeyword.getKeywordHome()
+                    if (response.isSuccessful) {
+                        response.body()?.result?.let{
+                            KeywordAppData.updateDetailTopic(it)
+                        }
+                        dialog.dismiss()
+
+                    } else {
+
+                    }
+                } catch (e: Exception) {
+                    e.printStackTrace()
+                }
+            }
+        }
+    }
 }
Index: app/src/main/java/kr/dori/android/own_cast/playlist/CastFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.dori.android.own_cast.playlist\r\n\r\nimport android.app.Activity\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.activity.result.ActivityResult\r\nimport androidx.activity.result.ActivityResultLauncher\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.fragment.app.Fragment\r\n\r\nimport androidx.fragment.app.activityViewModels\r\nimport androidx.lifecycle.Observer\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\nimport kr.dori.android.own_cast.ActivityMover\r\nimport kr.dori.android.own_cast.editAudio.EditAudioActivity\r\nimport kr.dori.android.own_cast.MainActivity\r\nimport kr.dori.android.own_cast.data.CastPlayerData\r\nimport kr.dori.android.own_cast.player.PlayCastActivity\r\nimport kr.dori.android.own_cast.data.SongData\r\nimport kr.dori.android.own_cast.databinding.FragmentCastBinding\r\nimport kr.dori.android.own_cast.forApiData.Cast\r\nimport kr.dori.android.own_cast.forApiData.Playlist\r\nimport kr.dori.android.own_cast.getRetrofit\r\n\r\nclass CastFragment(var playlistIdList : MutableList<Long>,var playlistTitleList : MutableList<String>) : Fragment(), ActivityMover {\r\n    private lateinit var binding: FragmentCastBinding\r\n    private lateinit var castAdapter: CastAdapter\r\n    private lateinit var activityResultLauncher: ActivityResultLauncher<Intent>\r\n    private var playlistList: MutableList<Cast> = mutableListOf()\r\n\r\n\r\n    private val sharedViewModel: SharedViewModel by activityViewModels()\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\r\n                              savedInstanceState: Bundle?): View? {\r\n        binding = FragmentCastBinding.inflate(inflater, container, false)\r\n\r\n        castAdapter = CastAdapter(this)\r\n\r\n        for (playlistId in playlistIdList){\r\n\r\n            val getAllPlaylist = getRetrofit().create(Playlist::class.java)\r\n\r\n            val isSave = arguments?.getBoolean(\"isSave\") ?: false\r\n\r\n            CoroutineScope(Dispatchers.IO).launch() {\r\n                launch {\r\n                    try {\r\n                        val response =\r\n                            getAllPlaylist.getPlaylistInfo(playlistId,0,5) //변수명이 어지럽지만 첫번째 getAll은 레트로핏 활성화 객체이고, 두번째는 인터페이스 내부 함수이다.\r\n                        if (response.isSuccessful) {\r\n                            var playlistInfo = response.body()?.result\r\n                            withContext(Dispatchers.Main) {\r\n                                playlistInfo?.let {\r\n                                    playlistList.addAll(it.castList)\r\n                                    Log.d(\"xibal\", \"$playlistList\")\r\n\r\n                                    var filteringData =\r\n                                        if (isSave) {\r\n                                            // isSave가 true일 때 필터링\r\n                                            playlistList.filter { cast -> cast.castCreator == \"헬로\" }\r\n                                        } else {\r\n                                            // isSave가 false일 때 필터링\r\n                                            playlistList.filter { cast -> cast.castCreator != \"헬로\" }\r\n                                        }.toMutableList()\r\n\r\n                                    val totalAudioLengthInSeconds = getTotalAudioLengthInSeconds(filteringData)\r\n                                    Log.d(\"TotalAudioLength\", \"총 오디오 길이 (초): $totalAudioLengthInSeconds\")\r\n                                    binding.castInfo.text = \"${filteringData.size}개, ${formatTime(totalAudioLengthInSeconds)}\"\r\n\r\n                                    castAdapter.dataList = filteringData\r\n\r\n                                    // 어댑터에 알림\r\n                                    castAdapter.notifyDataSetChanged()\r\n                                }\r\n                            }\r\n                        } else {\r\n\r\n                        }\r\n                    } catch (e: Exception) {\r\n                        e.printStackTrace()\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(isSave){\r\n                binding.fragmentCastMaintitleTv.text = \"내가 만든 캐스트\"\r\n                // binding.fragmentCastTitleTv.text = \"${castAdapter.itemCount},\"\r\n            }else{\r\n                binding.fragmentCastMaintitleTv.text = \"담아온 캐스트\"\r\n                // binding.fragmentCastTitleTv.text = \"${castAdapter.itemCount},\"\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        // CastAdapter 초기화\r\n\r\n\r\n\r\n        /*\r\n                // ViewModel 데이터 관찰\r\n                sharedViewModel.data.observe(viewLifecycleOwner, Observer { newData ->\r\n                    val savedData = arguments?.getParcelableArrayList<SongData>(\"isSave\")\r\n                    val unsavedData = arguments?.getParcelableArrayList<SongData>(\"isNotSave\")\r\n                    val data = savedData ?: unsavedData ?: arrayListOf()\r\n                    castAdapter.dataList =\r\n                    castAdapter.notifyDataSetChanged()\r\n                })\r\n\r\n\r\n                */\r\n\r\n        // Initialize ActivityResultLauncher\r\n        activityResultLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result: ActivityResult ->\r\n            if (result.resultCode == Activity.RESULT_OK) {\r\n                Log.d(\"ifsuccess\", \"success\")\r\n                val data: Intent? = result.data\r\n                val isSuccess = data?.getBooleanExtra(\"result\", false) ?: false\r\n                (activity as? MainActivity)?.setPlaylistTableVisibility(isSuccess)\r\n            }\r\n        }\r\n\r\n        // RecyclerView 설정\r\n        binding.fragmentCastRv.adapter = castAdapter\r\n        binding.fragmentCastRv.layoutManager = LinearLayoutManager(context)\r\n\r\n        // Back 버튼 클릭 이벤트 처리\r\n        binding.fragmentCastBackIv.setOnClickListener {\r\n            requireActivity().supportFragmentManager.popBackStack()\r\n        }\r\n\r\n        binding.fragmentCastPlayIv.setOnClickListener {\r\n            ToPlayCast(playlistList)\r\n        }\r\n\r\n        binding.fragmentCastShuffleIv.setOnClickListener {\r\n            ToPlayCast(playlistList)\r\n        }\r\n\r\n        return binding.root\r\n    }\r\n\r\n    override fun ToPlayCast(castList: List<Cast>) {\r\n        //   val currentCast = CastPlayerData.currentCast\r\n\r\n        CastPlayerData.setCast(castList)\r\n\r\n        val intent = Intent(requireContext(), PlayCastActivity::class.java)\r\n\r\n        activityResultLauncher.launch(intent)\r\n\r\n    }\r\n\r\n\r\n    override fun ToEditAudio() {\r\n        val intent = Intent(requireContext(), EditAudioActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    fun parseTimeToSeconds(input: String): Int {\r\n        return if (input.contains(\":\")) {\r\n            // 입력이 \"분:초\" 형식인 경우\r\n            val parts = input.split(\":\")\r\n            val minutes = parts[0].toIntOrNull() ?: 0\r\n            val seconds = parts[1].toIntOrNull() ?: 0\r\n            (minutes * 60) + seconds\r\n        } else {\r\n            // 입력이 이미 초 단위인 경우\r\n            input.toIntOrNull() ?: 0\r\n        }\r\n    }\r\n\r\n    fun getTotalAudioLengthInSeconds(castList: List<Cast>): Int {\r\n        return castList.sumOf { cast ->\r\n            parseTimeToSeconds(cast.audioLength)\r\n        }\r\n    }\r\n\r\n    fun formatTime(input: Int): String {\r\n\r\n        val totalSeconds = input ?: return \"00:00\" // 입력이 숫자가 아닌 경우 대비\r\n        val minutes = totalSeconds / 60\r\n        val seconds = totalSeconds % 60\r\n        val formatTime = String.format(\"%02d:%02d\", minutes, seconds)\r\n        return formatTime\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/kr/dori/android/own_cast/playlist/CastFragment.kt b/app/src/main/java/kr/dori/android/own_cast/playlist/CastFragment.kt
--- a/app/src/main/java/kr/dori/android/own_cast/playlist/CastFragment.kt	(revision ee11466f4ade434120101553d91eedd828823197)
+++ b/app/src/main/java/kr/dori/android/own_cast/playlist/CastFragment.kt	(date 1724057939063)
@@ -162,7 +162,7 @@
     }
 
 
-    override fun ToEditAudio() {
+    override fun ToEditAudio(id: Long,playlistId:Long) {
         val intent = Intent(requireContext(), EditAudioActivity::class.java)
         startActivity(intent)
     }
Index: app/src/main/java/kr/dori/android/own_cast/playlist/CategoryFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.dori.android.own_cast.playlist\r\n\r\nimport android.app.Activity\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.activity.result.ActivityResult\r\nimport androidx.activity.result.ActivityResultLauncher\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.fragment.app.activityViewModels\r\nimport androidx.lifecycle.Observer\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\nimport kr.dori.android.own_cast.ActivityMover\r\nimport kr.dori.android.own_cast.MainActivity\r\nimport kr.dori.android.own_cast.data.CastPlayerData\r\nimport kr.dori.android.own_cast.data.SongData\r\nimport kr.dori.android.own_cast.databinding.FragmentCategoryBinding\r\nimport kr.dori.android.own_cast.editAudio.EditAudioActivity\r\nimport kr.dori.android.own_cast.forApiData.Cast\r\nimport kr.dori.android.own_cast.forApiData.Playlist\r\nimport kr.dori.android.own_cast.getRetrofit\r\nimport kr.dori.android.own_cast.player.PlayCastActivity\r\nimport retrofit2.create\r\n\r\nclass CategoryFragment(val playlistId: Long, val playlistName: String) : Fragment(), ActivityMover {\r\n\r\n    private lateinit var binding: FragmentCategoryBinding\r\n    private val sharedViewModel: SharedViewModel by activityViewModels()\r\n    private lateinit var castAdapter: CastAdapter\r\n    private lateinit var activityResultLauncher: ActivityResultLauncher<Intent>\r\n    lateinit var sendCastIdList: List<Cast>\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        Log.d(\"xibal\",\"${playlistId}\")\r\n\r\n\r\n        binding =  FragmentCategoryBinding.inflate(inflater,container,false)\r\n\r\n        castAdapter = CastAdapter(this)\r\n\r\n\r\n\r\n        val getAllPlaylist = getRetrofit().create(Playlist::class.java)\r\n\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            try {\r\n                val response = getAllPlaylist.getPlaylistInfo(playlistId, 0, 5)\r\n                if (response.isSuccessful) {\r\n                    val playlistInfo = response.body()?.result\r\n                    withContext(Dispatchers.Main) {\r\n                        playlistInfo?.let {\r\n                            // 데이터를 캐스트 리스트로 변환하여 어댑터에 설정\r\n                            castAdapter.dataList = it.castList.toMutableList()\r\n                            Log.d(\"castInfo\",\"${it.castList}\")\r\n                            sendCastIdList = it.castList\r\n                            castAdapter.notifyDataSetChanged()\r\n\r\n                            // 총 오디오 길이 계산\r\n                            val totalAudioLengthInSeconds = getTotalAudioLengthInSeconds(it.castList)\r\n                            Log.d(\"TotalAudioLength\", \"총 오디오 길이 (초): $totalAudioLengthInSeconds\")\r\n                            binding.castSizeTotalLength.text = \"${it.castList.size}개, ${formatTime(totalAudioLengthInSeconds)}\"\r\n                        }\r\n                    }\r\n                } else {\r\n                    Log.d(\"PlaylistCategory\", \"Failed to fetch playlist info\")\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n\r\n        binding.fragmentCategoryBackIv.setOnClickListener {\r\n            requireActivity().supportFragmentManager.popBackStack()\r\n        }\r\n\r\n        binding.playlistName.text = playlistName\r\n\r\n\r\n        // Initialize ActivityResultLauncher\r\n        activityResultLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result: ActivityResult ->\r\n            if (result.resultCode == Activity.RESULT_OK) {\r\n                Log.d(\"ifsuccess\", \"success\")\r\n                val data: Intent? = result.data\r\n                val isSuccess = data?.getBooleanExtra(\"result\", false) ?: false\r\n                (activity as? MainActivity)?.setPlaylistTableVisibility(isSuccess)\r\n            }\r\n        }\r\n\r\n        binding.fragmentCategoryRv.adapter = castAdapter\r\n        binding.fragmentCategoryRv.layoutManager = LinearLayoutManager(context)\r\n\r\n\r\n\r\n// 이 부분은 재생목록 부분이어서 어떻게 수정할건지 생각을 해봐야 됨 -> 재생목록 순서를 어떻게 정할 것인가? -> 해결함\r\n\r\n        binding.fragmentCategoryPlayIv.setOnClickListener {\r\n            ToPlayCast(sendCastIdList)\r\n           // Log.d(\"Cast\",\"$sendCastIdList\")\r\n        }\r\n\r\n        binding.fragmentCategoryShuffleIv.setOnClickListener {\r\n            ToPlayCast(sendCastIdList)\r\n        }\r\n\r\n        return binding.root\r\n    }\r\n\r\n    override fun ToPlayCast(castList: List<Cast>) {\r\n\r\n        //   val currentCast = CastPlayerData.currentCast\r\n\r\n        CastPlayerData.setCast(castList)\r\n\r\n        val intent = Intent(requireContext(), PlayCastActivity::class.java)\r\n\r\n        activityResultLauncher.launch(intent)\r\n\r\n\r\n    }\r\n\r\n\r\n    override fun ToEditAudio() {\r\n        val intent = Intent(requireContext(), EditAudioActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    fun getTotalAudioLengthInSeconds(castList: List<Cast>): Int {\r\n        return castList.sumOf { cast ->\r\n            parseTimeToSeconds(cast.audioLength)\r\n        }\r\n    }\r\n\r\n    fun parseTimeToSeconds(input: String): Int {\r\n        return if (input.contains(\":\")) {\r\n            // 입력이 \"분:초\" 형식인 경우\r\n            val parts = input.split(\":\")\r\n            val minutes = parts[0].toIntOrNull() ?: 0\r\n            val seconds = parts[1].toIntOrNull() ?: 0\r\n            (minutes * 60) + seconds\r\n        } else {\r\n            // 입력이 이미 초 단위인 경우\r\n            input.toIntOrNull() ?: 0\r\n        }\r\n    }\r\n\r\n\r\n    fun formatTime(input: Int): String {\r\n\r\n            val totalSeconds = input ?: return \"00:00\" // 입력이 숫자가 아닌 경우 대비\r\n            val minutes = totalSeconds / 60\r\n            val seconds = totalSeconds % 60\r\n            val formatTime = String.format(\"%02d:%02d\", minutes, seconds)\r\n            return formatTime\r\n    }\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/kr/dori/android/own_cast/playlist/CategoryFragment.kt b/app/src/main/java/kr/dori/android/own_cast/playlist/CategoryFragment.kt
--- a/app/src/main/java/kr/dori/android/own_cast/playlist/CategoryFragment.kt	(revision ee11466f4ade434120101553d91eedd828823197)
+++ b/app/src/main/java/kr/dori/android/own_cast/playlist/CategoryFragment.kt	(date 1724057939070)
@@ -129,8 +129,9 @@
     }
 
 
-    override fun ToEditAudio() {
+    override fun ToEditAudio(id: Long,playlistId:Long) {
         val intent = Intent(requireContext(), EditAudioActivity::class.java)
+
         startActivity(intent)
     }
 
Index: app/src/main/java/kr/dori/android/own_cast/forApiData/AuthRetrofitInterface.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.dori.android.own_cast.forApiData\r\n\r\n\r\nimport android.renderscript.Script\r\n\r\nimport okhttp3.MultipartBody\r\nimport okhttp3.ResponseBody\r\nimport retrofit2.Call\r\nimport retrofit2.Response\r\nimport retrofit2.http.Body\r\nimport retrofit2.http.DELETE\r\nimport retrofit2.http.GET\r\nimport retrofit2.http.Multipart\r\nimport retrofit2.http.PATCH\r\nimport retrofit2.http.POST\r\nimport retrofit2.http.Part\r\nimport retrofit2.http.Path\r\nimport retrofit2.http.Query\r\nimport java.util.Objects\r\n\r\n//여기다가는 자기가 써야하는 함수 쓰기\r\n//AuthResponse에 써놓은 DTO(result의 구조체) 넣어줘야 함\r\n//ex)AuthResponse<List<CastHomeDTO>>>\r\n\r\ninterface CastInterface{\r\n    @DELETE(\"/api/cast/{castId}\")\r\n    fun deleteCast(@Path(\"castId\") castId:Long): Call<AuthResponse<String>>\r\n    @GET(\"/api/cast/{castId}/scripts\")\r\n    suspend fun getCastScript(@Path(\"castId\") castId:Long): Response<AuthResponse<List<Script>>>\r\n    @GET(\"/api/cast/{castId}/audio\")\r\n    suspend fun getCastPlay(@Path(\"castId\") castId: Long): Response<ResponseBody>\r\n\r\n\r\n\r\n\r\n    @GET(\"/api/cast/search/home\") // 검색 홈 API(검색 화면 상위 4개 castdata받아옴)\r\n    fun searchHome(): Call<AuthResponse<List<CastHomeDTO>>>\r\n    @GET(\"/api/cast/home\")// 홈화면 키워드 6개 받아오기\r\n    suspend fun getKeywordHome() : Response<AuthResponse<List<String>>>\r\n    @Multipart\r\n    @PATCH(\"/api/cast/{castId}\")//캐스트 수정 api, 이미지 파일로 보내야함\r\n\r\n    fun patchCast(@Path(\"castId\") castId:Long,@Part(\"updateInfo\") updateInfo: UpdateInfo, @Part image: MultipartBody.Part):Call<AuthResponse<String>>\r\n\r\n    @Multipart\r\n    @POST(\"/api/cast/{castId}\")//캐스트 저장 api keyvpSaveFragment에서 쓰인다\r\n    fun postCast(@Path(\"castId\") castId:Long,@Part(\"saveInfo\") saveInfo: SaveInfo, @Part image: MultipartBody.Part):Call<AuthResponse<String>>\r\n\r\n\r\n\r\n\r\n    /*@POST(\"/api/cast/{castId}\")//캐스트 저장 api keyvpSaveFragment에서 쓰인다\r\n    fun postCast(@Path(\"castId\") castId:Long,@Body postCast: PostCast):Call<AuthResponse<Objects>>*/\r\n\r\n    @POST(\"/api/cast/search\")//검색 API\r\n    suspend fun postSearchAPI(@Query(\"keyword\") keyword: String):Response<AuthResponse<List<CastHomeDTO>>>\r\n    @POST(\"/api/cast/script\")//스크립트로 캐스트를 생성하는 API, 반환되는 타입이 PostCastFromKeyword\r\n    suspend fun postCastByScript(@Body postCastByScript: PostCastByScript):Response<AuthResponse<PostCastForResponse>>\r\n    @POST(\"/api/cast/other\")\r\n    fun postOtherPlaylistCast(@Body postOtherPlaylistCast: PostOtherPlaylistCast):Call<AuthResponse<PostOtherPlaylist>>\r\n    @POST(\"/api/cast/keyword\")//키워드로 캐스트를 생성하는 API\r\n    suspend fun postCastByKeyword(@Body postCastByKeyword: PostCastByKeyword):Response<AuthResponse<PostCastForResponse>>\r\n    @POST(\"/api/cast/keyword-test\")//스크립트로 캐스트를 생성하는 API\r\n    //postCastByKeyword랑 같은거 쓰고 있음\r\n\r\n    fun postScriptList(@Body postCastByKeyword: PostCastByKeyword):Call<String>\r\n}\r\n\r\ninterface PlayListInterface{\r\n    @DELETE(\"/api/cast/{playlistId}\")\r\n    fun deleteCast(@Path(\"playlistId\") playlistId:Long): Call<AuthResponse<DeletePlaylist>>\r\n    @GET(\"/api/playlist/view\")// 사용자 플레이리스트 목록 받아오기\r\n    //GetPlayList잘못만든거같던데..\r\n    fun getPlayList() : Call<AuthResponse<List<GetUserPlaylist>>>\r\n    @POST(\"/api/playlist\")\r\n    fun postPlayList(@Query(\"playlistName\") playlistName: String) : Call<AuthResponse<PostPlaylist>>\r\n\r\n}\r\n\r\n\r\n\r\ninterface Playlist{\r\n    @DELETE(\"/api/playlist/{playlistId}\")\r\n    suspend fun deletePlaylist(@Query(\"playlistId\") playlistId: Long): Response<AuthResponse<DeletePlaylist>>\r\n\r\n    @GET(\"/api/playlist/{playlistId}\")\r\n    suspend fun getPlaylistInfo(@Query(\"playlistId\") playlistId: Long, @Query(\"page\") page: Int, @Query(\"size\") size: Int): Response<AuthResponse<GetPlayList>>\r\n\r\n    @GET(\"/api/playlist/view\")\r\n    suspend fun getAllPlaylist():Response<AuthResponse<List<GetAllPlaylist>>>\r\n\r\n    @PATCH(\"/api/playlist/{playlistId}\")\r\n    suspend fun patchPlaylist(@Query(\"playlistId\") playlistId: Long, @Query(\"playlistName\") playlistName: String): Response<AuthResponse<PatchPlaylist>>\r\n\r\n    @POST(\"/api/playlist\")\r\n    suspend fun postPlaylist(@Query(\"playlistName\")playlistName: String): Response<AuthResponse<PostPlaylist>>\r\n\r\n    @GET(\"/api/cast/{castId}\")\r\n    suspend fun getCast(@Path(\"castId\")castId: Long): Response<AuthResponse<CastInfo>>\r\n}\r\n\r\n\r\n\r\n\r\ninterface Bookmark {\r\n    @POST(\"/api/bookmark\")\r\n    suspend fun postBookmark(@Query(\"sentenceId\") sentenceId: Int): Response<AuthResponse<Long>>\r\n\r\n    @DELETE(\"/api/bookmark\")\r\n    suspend fun deleteBookmark(@Query(\"sentenceId\") sentenceId: Int):\r\n            Response<AuthResponse<Long>>\r\n\r\n    @GET(\"/api/study/{playlistId}\")\r\n    suspend fun getBookmark(@Path(\"playlistId\") playlistId: Int):\r\n            Response<AuthResponse<List<GetBookmark>>>\r\n\r\n    @GET(\"/api/study/savedcast\")\r\n    suspend fun getSaved(): Response<AuthResponse<List<GetBookmark>>>\r\n\r\n    @GET(\"/api/study/mycast\")\r\n    suspend fun getMy(): Response<AuthResponse<List<GetBookmark>>>\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/kr/dori/android/own_cast/forApiData/AuthRetrofitInterface.kt b/app/src/main/java/kr/dori/android/own_cast/forApiData/AuthRetrofitInterface.kt
--- a/app/src/main/java/kr/dori/android/own_cast/forApiData/AuthRetrofitInterface.kt	(revision ee11466f4ade434120101553d91eedd828823197)
+++ b/app/src/main/java/kr/dori/android/own_cast/forApiData/AuthRetrofitInterface.kt	(date 1724057939084)
@@ -72,6 +72,10 @@
     @GET("/api/playlist/view")// 사용자 플레이리스트 목록 받아오기
     //GetPlayList잘못만든거같던데..
     fun getPlayList() : Call<AuthResponse<List<GetUserPlaylist>>>
+
+    @GET("/api/playlist/view")// 사용자 플레이리스트 목록 받아오기
+    //GetPlayList잘못만든거같던데..
+    suspend fun getPlayListCorutine() : Response<AuthResponse<List<GetUserPlaylist>>>
     @POST("/api/playlist")
     fun postPlayList(@Query("playlistName") playlistName: String) : Call<AuthResponse<PostPlaylist>>
 
